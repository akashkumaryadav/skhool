"use client"; // This component is interactive, so it must be a client component

import { AnimatePresence, motion } from "framer-motion";
import {
  ArrowUpDown,
  ChevronLeft,
  ChevronRight,
  Columns,
  Download,
  GripVertical,
  Loader2,
  Search,
  X,
} from "lucide-react";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { VoiceInputButton } from "./VoiceInputButton";

// --- TYPE DEFINITIONS ---

/**
 * Defines the structure for a column in the data table.
 * @template T The type of the data row.
 */
export interface ColumnDef<T> {
  /** A key from the data object to access the value. */
  accessorKey: keyof T;
  /** The text displayed in the column header. */
  header: string;
  /** A custom render function for the cell. If not provided, it will render the raw value. */
  cell?: (row: T) => React.ReactNode;
  /** Marks the column as available for dropdown filtering. */
  isFilterable?: boolean;
  /** A list of pre-defined options for the filter dropdown. */
  filterOptions?: string[];
  filterType?: "category" | "text" | "email";
}

export interface FilterCondition {
  field: string;
  operator: "equals" | "contains";
  value: any;
}

/**
 * Props for the GenericDataTable component.
 * @template T The type of the data row.
 */
interface GenericDataTableProps<T> {
  /** The main title displayed above the table. */
  title: string;
  /** The array of data to display. */
  data: T[];
  /** An array of column definitions. */
  columns: ColumnDef<T>[];
  /** Configuration for the main call-to-action button. */
  ctaButton: Array<{
    text: string;
    onClick: () => void;
  }>;
  /** Callback function that emits the current search query to the parent component. */
  onSearchQueryChange: (query: string) => void;
  /** An object of filters generated by an external source (like AI) to be applied. */
  aiFilters?: FilterCondition[];
  /** A boolean to indicate if an external process (like AI search) is running. */
  isAiProcessing?: boolean;
  totalCount?: number;
  onPageChange?: (page: number) => void;
  onItemsPerPageChange?: (size: number) => void;
}

// --- SUB-COMPONENTS ---

/**
 * A modal for showing, hiding, and reordering table columns.
 */
function ManageColumnsModal<T>({
  isOpen,
  onClose,
  allColumns,
  visibleColumns,
  onSave,
}: {
  isOpen: boolean;
  onClose: () => void;
  allColumns: ColumnDef<T>[];
  visibleColumns: (keyof T)[];
  onSave: (newVisibleColumns: (keyof T)[]) => void;
}) {
  const [tempVisible, setTempVisible] = useState(new Set(visibleColumns));
  const [orderedColumns, setOrderedColumns] = useState<(keyof T)[]>([]);
  const dragItem = useRef<number | null>(null);
  const dragOverItem = useRef<number | null>(null);

  useEffect(() => {
    if (isOpen) {
      setTempVisible(new Set(visibleColumns));
      setOrderedColumns(visibleColumns);
    }
  }, [isOpen, visibleColumns]);

  const handleToggleColumn = (accessorKey: keyof T) => {
    const newSet = new Set(tempVisible);
    if (newSet.has(accessorKey)) {
      newSet.delete(accessorKey);
    } else {
      newSet.add(accessorKey);
    }
    setTempVisible(newSet);

    const newOrdered = allColumns
      .map((c) => c.accessorKey)
      .filter((key) => newSet.has(key));
    setOrderedColumns(newOrdered);
  };

  const handleDragSort = () => {
    if (dragItem.current === null || dragOverItem.current === null) return;
    const newOrderedColumns = [...orderedColumns];
    const draggedItemContent = newOrderedColumns.splice(dragItem.current, 1)[0];
    newOrderedColumns.splice(dragOverItem.current, 0, draggedItemContent);
    dragItem.current = null;
    dragOverItem.current = null;
    setOrderedColumns(newOrderedColumns);
  };

  const handleSave = () => {
    onSave(orderedColumns);
    onClose();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className="bg-white rounded-xl shadow-2xl w-full max-w-3xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="p-6 border-b">
              <h3 className="text-lg font-bold text-gray-800">
                Manage Columns
              </h3>
              <p className="text-sm text-gray-500">
                Select columns to display.
              </p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 p-6 gap-6">
              <div>
                <h4 className="font-semibold mb-2">Column Options</h4>
                <div className="space-y-2 max-h-80 overflow-y-auto pr-2">
                  {allColumns.map((col) => (
                    <label
                      key={String(col.accessorKey)}
                      className="flex items-center gap-3 p-2 rounded-md hover:bg-gray-100"
                    >
                      <input
                        type="checkbox"
                        className="rounded border-gray-300 text-orange-600 focus:ring-orange-500"
                        checked={tempVisible.has(col.accessorKey)}
                        onChange={() => handleToggleColumn(col.accessorKey)}
                      />
                      <span>{col.header}</span>
                    </label>
                  ))}
                </div>
              </div>
              <div>
                <h4 className="font-semibold mb-2">
                  Selected Columns ({orderedColumns.length})
                </h4>
                <div className="space-y-2 max-h-80 overflow-y-auto border rounded-lg p-2">
                  {orderedColumns.map((key, index) => (
                    <div
                      key={String(key)}
                      className="flex items-center justify-between p-2 bg-gray-50 rounded-md cursor-grab"
                      draggable
                      onDragStart={() => (dragItem.current = index)}
                      onDragEnter={() => (dragOverItem.current = index)}
                      onDragEnd={handleDragSort}
                      onDragOver={(e) => e.preventDefault()}
                    >
                      <div className="flex items-center gap-2">
                        <GripVertical size={16} className="text-gray-400" />
                        <span>
                          {
                            allColumns.find((c) => c.accessorKey === key)
                              ?.header
                          }
                        </span>
                      </div>
                      <X
                        size={16}
                        className="text-gray-400 cursor-pointer hover:text-red-500"
                        onClick={() => handleToggleColumn(key)}
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>
            <div className="p-4 bg-gray-50 flex justify-end gap-3 rounded-b-xl">
              <button
                onClick={onClose}
                className="px-4 py-2 text-sm font-semibold text-gray-700 bg-white border rounded-lg hover:bg-gray-100"
              >
                Cancel
              </button>
              <button
                onClick={handleSave}
                className="px-4 py-2 text-sm font-semibold text-white bg-orange-600 rounded-lg hover:bg-orange-700"
              >
                Save
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

/**
 * A component for table pagination controls.
 */
function PaginationControls({
  currentPage,
  totalItems,
  itemsPerPage,
  onPageChange,
  onItemsPerPageChange,
}: {
  currentPage: number;
  totalItems: number;
  itemsPerPage: number;
  onPageChange: (page: number) => void;
  onItemsPerPageChange: (size: number) => void;
}) {
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const startItem = totalItems > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0;
  const endItem = Math.min(currentPage * itemsPerPage, totalItems);

  return (
    <div className="flex flex-col md:flex-row items-center justify-between pt-4 text-sm text-gray-600">
      <p>
        Showing{" "}
        <span className="font-semibold">
          {startItem}-{endItem}
        </span>{" "}
        of <span className="font-semibold">{totalItems}</span> results
      </p>
      <div className="flex items-center gap-4 mt-4 md:mt-0">
        <div className="flex items-center gap-2">
          <span>Rows per page:</span>
          <select
            value={itemsPerPage}
            onChange={(e) => onItemsPerPageChange(Number(e.target.value))}
            className="border-gray-300 rounded-md text-sm shadow-sm"
          >
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
          </select>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => onPageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className="p-1 disabled:opacity-50"
          >
            <ChevronLeft size={20} />
          </button>
          <span>
            Page {currentPage} of {totalPages > 0 ? totalPages : 1}
          </span>
          <button
            onClick={() => onPageChange(currentPage + 1)}
            disabled={currentPage === totalPages || totalPages === 0}
            className="p-1 disabled:opacity-50"
          >
            <ChevronRight size={20} />
          </button>
        </div>
      </div>
    </div>
  );
}

// --- MAIN DATA TABLE COMPONENT ---

export function GenericDataTable<T extends { id: string | number }>({
  title,
  data,
  columns: allColumns,
  ctaButton,
  onSearchQueryChange,
  aiFilters = [],
  isAiProcessing = false,
  totalCount = 0,
  onPageChange = () => {},
  onItemsPerPageChange = () => {},
}: GenericDataTableProps<T>) {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRows, setSelectedRows] = useState<Set<string | number>>(
    new Set()
  );
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [visibleColumnKeys, setVisibleColumnKeys] = useState<(keyof T)[]>(() =>
    allColumns.map((c) => c.accessorKey)
  );
  const [activeFilters, setActiveFilters] = useState<Record<string, string>>(
    {}
  );
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);

  const filterableColumns = useMemo(
    () => allColumns.filter((c) => c.isFilterable),
    [allColumns]
  );
  const visibleColumns = useMemo(
    () =>
      visibleColumnKeys
        .map((key) => allColumns.find((c) => c.accessorKey === key))
        .filter(Boolean) as ColumnDef<T>[],
    [visibleColumnKeys, allColumns]
  );

  const handleFilterChange = (key: string, value: string) => {
    setActiveFilters((prev) => ({ ...prev, [key]: value }));
    setCurrentPage(1);
  };

  const removeFilter = (key: string) => {
    setActiveFilters((prev) => {
      const newFilters = { ...prev };
      delete newFilters[key];
      return newFilters;
    });
    setCurrentPage(1);
  };

  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
    onPageChange(newPage); // Emit change to parent
  };

  const handleItemsPerPageChange = (size: number) => {
    setItemsPerPage(size);
    setCurrentPage(1); // Reset to page 1
    onItemsPerPageChange(size); // Emit change to parent
    onPageChange(1); // Also emit page change
  };

  const handleSelectAll = () => {
    if (selectedRows.size === data.length) {
      setSelectedRows(new Set());
    } else {
      setSelectedRows(new Set(data.map((r) => r.id)));
    }
  };

  const handleVoiceResult = (transcript: string) => {
    // When voice recognition provides a result, we treat it
    // exactly as if the user had typed it in the search bar.
    setSearchTerm(transcript);

    // This triggers the parent component's (StudentManagementPage) useEffect
    // to call the AI API with the new transcribed text.
    onSearchQueryChange(transcript);
  };

  return (
    <>
      <ManageColumnsModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        allColumns={allColumns}
        visibleColumns={visibleColumnKeys}
        onSave={setVisibleColumnKeys}
      />
      <div className="bg-white p-6 rounded-2xl shadow-sm w-full">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
          <h2 className="text-2xl font-bold text-gray-800 mb-4 md:mb-0">
            {title}
          </h2>
          <div className="flex items-center gap-2">
            <button
              onClick={() => setIsModalOpen(true)}
              className="px-3 py-2 text-sm font-semibold text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 flex items-center gap-2"
            >
              <Columns size={16} /> Manage Columns
            </button>
            <button className="px-3 py-2 text-sm font-semibold text-gray-700 bg-white border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 flex items-center gap-2">
              <Download size={16} /> Export
            </button>
            {ctaButton.map((b) => (
              <button
                key={b.text}
                onClick={b.onClick}
                className="px-4 py-2 text-sm font-semibold text-white bg-orange-600 rounded-lg shadow-sm hover:bg-orange-700"
              >
                {b.text}
              </button>
            ))}
          </div>
        </div>

        <div className="mb-4 space-y-4">
          <div className="flex flex-col md:flex-row items-center gap-4">
            <div className="relative w-full md:w-2/3 flex items-center gap-2">
              <div className="relative w-full flex gap-2">
                <div className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
                  {isAiProcessing ? (
                    <Loader2 size={18} className="animate-spin" />
                  ) : (
                    <Search size={18} />
                  )}
                </div>
                <input
                  type="text"
                  placeholder="Type or use the mic to search..."
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    onSearchQueryChange(e.target.value);
                  }}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                />
                <VoiceInputButton onResult={handleVoiceResult} />
              </div>
            </div>
            {filterableColumns.map((col) => (
              <select
                key={String(col.accessorKey)}
                onChange={(e) =>
                  handleFilterChange(String(col.accessorKey), e.target.value)
                }
                className="w-full md:w-auto px-4 py-2 text-sm text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-orange-500"
              >
                <option value="">{col.header}</option>
                {col.filterOptions?.map((opt) => (
                  <option key={opt} value={opt}>
                    {opt}
                  </option>
                ))}
              </select>
            ))}
          </div>
          <div className="flex flex-wrap items-center gap-2 min-h-[28px]">
            {/* You can keep a loop for manual filters if you have them */}
            {Object.entries(activeFilters).map(
              ([key, value]) =>
                value && (
                  <div
                    key={key}
                    className="flex items-center gap-1 bg-gray-200 text-gray-800 text-xs font-semibold px-2 py-1 rounded-full"
                  >
                    <span>
                      {allColumns.find((c) => c.accessorKey === key)?.header}:{" "}
                      {value}
                    </span>
                    <X
                      size={14}
                      className="cursor-pointer"
                      onClick={() => removeFilter(key)}
                    />
                  </div>
                )
            )}

            {/* A dedicated loop specifically for AI filters */}
            {aiFilters.map((filter, index) => (
              <div
                key={`ai-${index}`}
                className="flex items-center gap-1 bg-blue-100 text-blue-800 text-xs font-semibold px-2 py-1 rounded-full"
              >
                <span title="Generated by AI">✨</span>
                {/* 
                  Correctly build a string from the object's properties 
                  instead of trying to render the object itself.
                */}
                <span>
                  {
                    allColumns.find((c) => c.accessorKey === filter.field)
                      ?.header
                  }{" "}
                  {filter.operator} &quot;{filter.value}&quot;
                </span>
                <X
                  size={14}
                  className="cursor-pointer"
                  onClick={() => {
                    // Clear the search to remove AI filters
                    setSearchTerm("");
                    onSearchQueryChange("");
                  }}
                />
              </div>
            ))}
          </div>
        </div>

        <div className="overflow-x-auto  max-h-[50dvh] overflow-auto">
          <table className="w-full text-sm text-left">
            <thead className="bg-gray-50 text-gray-500 uppercase text-xs">
              <tr>
                <th className="p-3 w-10">
                  <input
                    type="checkbox"
                    className="rounded border-gray-300 text-orange-600 focus:ring-orange-500"
                    checked={
                      selectedRows.size === data.length && data.length > 0
                    }
                    onChange={handleSelectAll}
                  />
                </th>
                {visibleColumns.map((col) => (
                  <th
                    key={String(col.accessorKey)}
                    className="p-3 font-semibold"
                  >
                    <div className="flex items-center gap-1">
                      {col.header}
                      <ArrowUpDown size={14} />
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="divide-y  divide-gray-200">
              {data.map((row) => (
                <tr key={row.id} className="hover:bg-gray-50">
                  <td className="p-3">
                    <input
                      type="checkbox"
                      className="rounded border-gray-300 text-orange-600 focus:ring-orange-500"
                      checked={selectedRows.has(row.id)}
                      onChange={() => {
                        const newSet = new Set(selectedRows);
                        if (newSet.has(row?.id)) {
                          newSet.delete(row?.id);
                        } else {
                          newSet.add(row?.id);
                        }
                        setSelectedRows(newSet);
                      }}
                    />
                  </td>
                  {visibleColumns.map((col) => (
                    <td key={String(col.accessorKey)} className="p-3 align-top">
                      {col.cell ? col.cell(row) : String(row[col.accessorKey])}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <PaginationControls
          currentPage={currentPage}
          totalItems={totalCount}
          itemsPerPage={itemsPerPage}
          onPageChange={handlePageChange}
          onItemsPerPageChange={handleItemsPerPageChange}
        />
      </div>
    </>
  );
}
